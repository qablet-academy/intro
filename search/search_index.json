{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction qablet-basic contains a suite of models to evaluate qablet timetables. It includes - Finite Difference/PDE models such as Hull-White and Black-Scholes Fixed model A Monte Carlo pricer to use any model defined using the finmc interface. What is a Qablet Timetable? A Qablet timetable defines a financial contract using a sequence of payments, choices and conditions. A Qablet model can value any contract, as long as the contract can be described using a timetable such as this one - track time op quantity unit 0 #1 03/31/2024 > 0.0 USD 1 #1 03/31/2024 + -2900.0 USD 2 #1 03/31/2024 + 1.0 SPX See Qablet Contracts for the timetable semantics, and a library of common financial contracts. Getting Started install from pip pip install qablet-basic Start with Example 1: Hello World","title":"Home"},{"location":"#introduction","text":"qablet-basic contains a suite of models to evaluate qablet timetables. It includes - Finite Difference/PDE models such as Hull-White and Black-Scholes Fixed model A Monte Carlo pricer to use any model defined using the finmc interface.","title":"Introduction"},{"location":"#what-is-a-qablet-timetable","text":"A Qablet timetable defines a financial contract using a sequence of payments, choices and conditions. A Qablet model can value any contract, as long as the contract can be described using a timetable such as this one - track time op quantity unit 0 #1 03/31/2024 > 0.0 USD 1 #1 03/31/2024 + -2900.0 USD 2 #1 03/31/2024 + 1.0 SPX See Qablet Contracts for the timetable semantics, and a library of common financial contracts.","title":"What is a Qablet Timetable?"},{"location":"#getting-started","text":"install from pip pip install qablet-basic Start with Example 1: Hello World","title":"Getting Started"},{"location":"assets/","text":"Assets The ASSETS component of the dataset describes the forwards of each asset that would be required to value a contract. This includes the base asset (currency) in which the contract is valued any asset (currency, equity, commodity) received by the contract any asset value used in a snapper, or in a model In the present version the following schemas are supported to describe the forwards. This list will be extended in coming versions. Zero Rates You can describe the base asset using a two-column (N X 2) numpy array, where the first column is time, and the second represents term zero rates , e.g. [[0. 0.04] [1. 0.04] [5. 0.05]] It can be created like discount_data = (\"ZERO_RATES\", np.array([[0.0, 0.04], [1.0, .04], [5.0, 0.05]])) dataset = { \"BASE\": \"USD\", \"PRICING_TS\": .. \"ASSETS\": {\"USD\": discount_data}, } Or alternatively, using np.column_stack from two arrays times = np.array([0.0, 1.0, 5.0]) rates = np.array([0.04, 0.04, 0.05]) discount_data = (\"ZERO_RATES\", np.column_stack((times, rates))) Forwards You can describe any asset using a two-column (N X 2) numpy array, where the first column is time, and the second represents forwards, e.g. spot = 2900 div_rate = 0.01 times = np.array([0.0, 1.0, 2.0, 5.0]) rates = np.array([0.04, 0.04, 0.045, 0.05]) fwds = spot * np.exp((rates - div_rate) * times) fwd_data = (\"FORWARDS\", np.column_stack((times, fwds))) dataset = { \"BASE\": \"USD\", \"PRICING_TS\": .. \"ASSETS\": {\"SPX\": fwd_data}, }","title":"Assets"},{"location":"assets/#assets","text":"The ASSETS component of the dataset describes the forwards of each asset that would be required to value a contract. This includes the base asset (currency) in which the contract is valued any asset (currency, equity, commodity) received by the contract any asset value used in a snapper, or in a model In the present version the following schemas are supported to describe the forwards. This list will be extended in coming versions.","title":"Assets"},{"location":"assets/#zero-rates","text":"You can describe the base asset using a two-column (N X 2) numpy array, where the first column is time, and the second represents term zero rates , e.g. [[0. 0.04] [1. 0.04] [5. 0.05]] It can be created like discount_data = (\"ZERO_RATES\", np.array([[0.0, 0.04], [1.0, .04], [5.0, 0.05]])) dataset = { \"BASE\": \"USD\", \"PRICING_TS\": .. \"ASSETS\": {\"USD\": discount_data}, } Or alternatively, using np.column_stack from two arrays times = np.array([0.0, 1.0, 5.0]) rates = np.array([0.04, 0.04, 0.05]) discount_data = (\"ZERO_RATES\", np.column_stack((times, rates)))","title":"Zero Rates"},{"location":"assets/#forwards","text":"You can describe any asset using a two-column (N X 2) numpy array, where the first column is time, and the second represents forwards, e.g. spot = 2900 div_rate = 0.01 times = np.array([0.0, 1.0, 2.0, 5.0]) rates = np.array([0.04, 0.04, 0.045, 0.05]) fwds = spot * np.exp((rates - div_rate) * times) fwd_data = (\"FORWARDS\", np.column_stack((times, fwds))) dataset = { \"BASE\": \"USD\", \"PRICING_TS\": .. \"ASSETS\": {\"SPX\": fwd_data}, }","title":"Forwards"},{"location":"dataset/","text":"Dataset All models in the qablet package have a signature as follows: price, stats = model.price(timetable, dataset) The arg timetable is a qablet timetable . The arg dataset is a dict with the following components BASE String containing the name of the base asset, i.e. the currency in which the price is denominated. PRICING_TS The timestamp (milliseconds) that we will price the contract as of. ASSETS Dict containing forwards of all assets in the contract, including the base asset. See Assets for more. {Model Family Name} Dict containing parameters for the model family such as MC or FD . {Model Name} Dict containing parameters of the model. See the MODELS section for more. Example import numpy as np from datetime import datetime from qablet_contracts.timetable import py_to_ts times = np.array([0.0, 1.0, 2.0, 5.0]) # in years rates = np.array([0.04, 0.04, 0.045, 0.05]) # i.e. 4%, etc fwds = np.array([100.0, 101.0, 102.0, 104.0]) discount_data = (\"ZERO_RATES\", np.column_stack((times, rates))) fwd_data = (\"FORWARDS\", np.column_stack((times, fwds))) dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(datetime(2023, 12, 31)).value, \"ASSETS\": {\"USD\": discount_data, \"SPX\": fwd_data}, \"MC\": { \"PATHS\": 100_000, \"TIMESTEP\": 1 / 250, \"SEED\": 1, }, \"HESTON\": { \"ASSET\": \"SPX\", \"INITIAL_VAR\": 0.015, \"LONG_VAR\": 0.052, \"VOL_OF_VAR\": 0.88, \"MEANREV\": 2.78, \"CORRELATION\": -0.85, } }","title":"Dataset"},{"location":"dataset/#dataset","text":"All models in the qablet package have a signature as follows: price, stats = model.price(timetable, dataset) The arg timetable is a qablet timetable . The arg dataset is a dict with the following components BASE String containing the name of the base asset, i.e. the currency in which the price is denominated. PRICING_TS The timestamp (milliseconds) that we will price the contract as of. ASSETS Dict containing forwards of all assets in the contract, including the base asset. See Assets for more. {Model Family Name} Dict containing parameters for the model family such as MC or FD . {Model Name} Dict containing parameters of the model. See the MODELS section for more.","title":"Dataset"},{"location":"dataset/#example","text":"import numpy as np from datetime import datetime from qablet_contracts.timetable import py_to_ts times = np.array([0.0, 1.0, 2.0, 5.0]) # in years rates = np.array([0.04, 0.04, 0.045, 0.05]) # i.e. 4%, etc fwds = np.array([100.0, 101.0, 102.0, 104.0]) discount_data = (\"ZERO_RATES\", np.column_stack((times, rates))) fwd_data = (\"FORWARDS\", np.column_stack((times, fwds))) dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(datetime(2023, 12, 31)).value, \"ASSETS\": {\"USD\": discount_data, \"SPX\": fwd_data}, \"MC\": { \"PATHS\": 100_000, \"TIMESTEP\": 1 / 250, \"SEED\": 1, }, \"HESTON\": { \"ASSET\": \"SPX\", \"INITIAL_VAR\": 0.015, \"LONG_VAR\": 0.052, \"VOL_OF_VAR\": 0.88, \"MEANREV\": 2.78, \"CORRELATION\": -0.85, } }","title":"Example"},{"location":"quickstart/","text":"You will need the following packages. qablet-contracts contains utilities to create qablet timetables for financial contracts. qablet-basic contains a suite of models to evaluate qablet timetables. pip install qablet-contracts pip install qablet-basic Example 1: Fixed Model In this example we create a zero coupon bond, and price it using a deterministic/fixed model. import numpy as np from pyarrow import RecordBatch as rb from datetime import datetime from qablet_contracts.timetable import TS_EVENT_SCHEMA, py_to_ts from qablet.base.fixed import FixedModel # Create Timetable events = [ { \"track\": \"\", \"time\": datetime(2024, 12, 31), \"op\": \"+\", \"quantity\": 100.0, \"unit\": \"USD\", }, ] timetable = { \"events\": rb.from_pylist(events, schema=TS_EVENT_SCHEMA) } # Create Dataset for FixedModel discount_data = (\"ZERO_RATES\", np.array([[5.0, 0.04]])) # 5yr : 4% dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(datetime(2023, 12, 31)).value, \"ASSETS\": {\"USD\": discount_data}, } # Calculate Price with FixedModel model = FixedModel() price, _ = model.price(timetable, dataset) print(f\"price: {price:11.6f}\") Example 2: Heston model In this example we price an vanilla call option using Heston model from the finmc package. import numpy as np from datetime import datetime from qablet_contracts.eq.vanilla import Option from qablet_contracts.timetable import py_to_ts from finmc.models.heston import HestonMC from qablet.base.mc import MCPricer # Create option contract using qablet_contracts pricing_dt = datetime(2024, 3, 15) maturity = datetime(2024, 7, 31) spot = 171.17 contract = Option( \"USD\", \"AAPL\", strike=spot, maturity=maturity, is_call=True, ) contract.print_events() timetable = contract.timetable() # Create dataset for Heston model discount_data = (\"ZERO_RATES\", np.array([[5.0, 0.05]])) fwd_data = (\"FORWARDS\", np.array([[0.0, spot], [1.0, spot * 1.03]])) dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(pricing_dt).value, \"ASSETS\": {\"USD\": discount_data, \"AAPL\": fwd_data}, \"MC\": { \"PATHS\": 100_000, \"TIMESTEP\": 1 / 250, \"SEED\": 1, }, \"HESTON\": { \"ASSET\": \"AAPL\", \"INITIAL_VAR\": 0.015, \"LONG_VAR\": 0.052, \"VOL_OF_VOL\": 0.88, \"MEANREV\": 2.78, \"CORRELATION\": -0.85, }, } # Price model = MCPricer(HestonMC) price, _ = model.price(timetable, dataset) print(f\"price: {price:11.6f}\") Next Step Dive into the Qablet Learning Path next. It is a set of Jupyter notebooks that will walk you through simple to advanced uses of Qablet. Other Resources See Qablet Contracts for the timetable semantics, and a library of common financial contracts. See Dataset API to construct a dataset from your market environment. See Finite Difference/PDE and Monte Carlo models in the qablet-basic package. Try Qablet App - an interactive showcase of several Qablet contracts, for pricing and backtesting.","title":"Getting Started"},{"location":"quickstart/#example-1-fixed-model","text":"In this example we create a zero coupon bond, and price it using a deterministic/fixed model. import numpy as np from pyarrow import RecordBatch as rb from datetime import datetime from qablet_contracts.timetable import TS_EVENT_SCHEMA, py_to_ts from qablet.base.fixed import FixedModel # Create Timetable events = [ { \"track\": \"\", \"time\": datetime(2024, 12, 31), \"op\": \"+\", \"quantity\": 100.0, \"unit\": \"USD\", }, ] timetable = { \"events\": rb.from_pylist(events, schema=TS_EVENT_SCHEMA) } # Create Dataset for FixedModel discount_data = (\"ZERO_RATES\", np.array([[5.0, 0.04]])) # 5yr : 4% dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(datetime(2023, 12, 31)).value, \"ASSETS\": {\"USD\": discount_data}, } # Calculate Price with FixedModel model = FixedModel() price, _ = model.price(timetable, dataset) print(f\"price: {price:11.6f}\")","title":"Example 1: Fixed Model"},{"location":"quickstart/#example-2-heston-model","text":"In this example we price an vanilla call option using Heston model from the finmc package. import numpy as np from datetime import datetime from qablet_contracts.eq.vanilla import Option from qablet_contracts.timetable import py_to_ts from finmc.models.heston import HestonMC from qablet.base.mc import MCPricer # Create option contract using qablet_contracts pricing_dt = datetime(2024, 3, 15) maturity = datetime(2024, 7, 31) spot = 171.17 contract = Option( \"USD\", \"AAPL\", strike=spot, maturity=maturity, is_call=True, ) contract.print_events() timetable = contract.timetable() # Create dataset for Heston model discount_data = (\"ZERO_RATES\", np.array([[5.0, 0.05]])) fwd_data = (\"FORWARDS\", np.array([[0.0, spot], [1.0, spot * 1.03]])) dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(pricing_dt).value, \"ASSETS\": {\"USD\": discount_data, \"AAPL\": fwd_data}, \"MC\": { \"PATHS\": 100_000, \"TIMESTEP\": 1 / 250, \"SEED\": 1, }, \"HESTON\": { \"ASSET\": \"AAPL\", \"INITIAL_VAR\": 0.015, \"LONG_VAR\": 0.052, \"VOL_OF_VOL\": 0.88, \"MEANREV\": 2.78, \"CORRELATION\": -0.85, }, } # Price model = MCPricer(HestonMC) price, _ = model.price(timetable, dataset) print(f\"price: {price:11.6f}\")","title":"Example 2: Heston model"},{"location":"quickstart/#next-step","text":"Dive into the Qablet Learning Path next. It is a set of Jupyter notebooks that will walk you through simple to advanced uses of Qablet.","title":"Next Step"},{"location":"quickstart/#other-resources","text":"See Qablet Contracts for the timetable semantics, and a library of common financial contracts. See Dataset API to construct a dataset from your market environment. See Finite Difference/PDE and Monte Carlo models in the qablet-basic package. Try Qablet App - an interactive showcase of several Qablet contracts, for pricing and backtesting.","title":"Other Resources"},{"location":"models/fd/","text":"Finite Difference Models All Finite-Difference Models (one factor) include a common section ( FD ), and a model dependent section. The common section has the following parameters. TIMESTEP : The incremental timestep of simulation (in years). MAX_X : Distance of the upper (or lower) boundary of the model grid from the center. N_X : The number of levels from the center, in each direction. e.g. \"FD\": { \"TIMESTEP\": 1 / 250, \"MAX_X\": 0.1, \"N_X\": 250, }, Black-Scholes Model qablet.black_scholes.fd.BSFDModel In the Heston model the lognormal stock process X_t is given by, dX_t = (\\mu_t - \\frac{\\sigma^2}{2})dt + \\sigma dW_t The model specific component in the dataset ( BS ) is a dict with VOL ( \\sigma ), and the name of the asset: e.g. \"BS\": { \"ASSET\": \"SPX\", \"VOL\": 0.3, } Hull-White Model qablet.hullwhite.fd.HWFDModel In the Hull White model, the short-rate follows the following process. dr_t = [\\theta_t - a r_t]dt + \\sigma dW_t The model specific component in the dataset ( HW ) is a dict with the parameters: a , the mean reversion rate (MEANREV). \\sigma , the volatility (VOL). e.g. \"HW\": { \"MEANREV\": 0.1, \"VOL\": 0.03, }","title":"Finite-Difference"},{"location":"models/fd/#finite-difference-models","text":"All Finite-Difference Models (one factor) include a common section ( FD ), and a model dependent section. The common section has the following parameters. TIMESTEP : The incremental timestep of simulation (in years). MAX_X : Distance of the upper (or lower) boundary of the model grid from the center. N_X : The number of levels from the center, in each direction. e.g. \"FD\": { \"TIMESTEP\": 1 / 250, \"MAX_X\": 0.1, \"N_X\": 250, },","title":"Finite Difference Models"},{"location":"models/fd/#black-scholes-model","text":"qablet.black_scholes.fd.BSFDModel In the Heston model the lognormal stock process X_t is given by, dX_t = (\\mu_t - \\frac{\\sigma^2}{2})dt + \\sigma dW_t The model specific component in the dataset ( BS ) is a dict with VOL ( \\sigma ), and the name of the asset: e.g. \"BS\": { \"ASSET\": \"SPX\", \"VOL\": 0.3, }","title":"Black-Scholes Model"},{"location":"models/fd/#hull-white-model","text":"qablet.hullwhite.fd.HWFDModel In the Hull White model, the short-rate follows the following process. dr_t = [\\theta_t - a r_t]dt + \\sigma dW_t The model specific component in the dataset ( HW ) is a dict with the parameters: a , the mean reversion rate (MEANREV). \\sigma , the volatility (VOL). e.g. \"HW\": { \"MEANREV\": 0.1, \"VOL\": 0.03, }","title":"Hull-White Model"},{"location":"models/fixed/","text":"Fixed Model The fixed model requires no model specific parameters. dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(datetime(2023, 12, 31)).value, \"ASSETS\": {\"USD\": discount_data}, } See a complete example here.","title":"Fixed"},{"location":"models/fixed/#fixed-model","text":"The fixed model requires no model specific parameters. dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(datetime(2023, 12, 31)).value, \"ASSETS\": {\"USD\": discount_data}, } See a complete example here.","title":"Fixed Model"},{"location":"models/mc/","text":"Monte-Carlo Models All Monte-Carlo Models include a common section ( MC ), and a model dependent section. The common section has the following parameters. PATHS : The number of Monte-Carlo paths. TIMESTEP : The incremental timestep of simulation (in years). SEED : The seed for the random number generator. e.g. \"MC\": { \"PATHS\": 100_000, \"TIMESTEP\": 1 / 250, \"SEED\": 1, }, finmc models The finmc package contains Monte-Carlo implementations of many financial models derived from a common interface class. You can price qablet contracts using finmc models by creating a model instance as follows. from finmc.models.heston import HestonMC from qablet.base.mc import MCPricer model = MCPricer(HestonMC) See a complete example here. See the documentattion of finmc models here - Heston Hull-White LocalVol The dataset should follow the requirements of the corresponding finmc model. Additionally, it should contain the PRICING_TS component for the datetime that we are calculating price as of. dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(pricing_dt).value, ...","title":"Monte-Carlo"},{"location":"models/mc/#monte-carlo-models","text":"All Monte-Carlo Models include a common section ( MC ), and a model dependent section. The common section has the following parameters. PATHS : The number of Monte-Carlo paths. TIMESTEP : The incremental timestep of simulation (in years). SEED : The seed for the random number generator. e.g. \"MC\": { \"PATHS\": 100_000, \"TIMESTEP\": 1 / 250, \"SEED\": 1, },","title":"Monte-Carlo Models"},{"location":"models/mc/#finmc-models","text":"The finmc package contains Monte-Carlo implementations of many financial models derived from a common interface class. You can price qablet contracts using finmc models by creating a model instance as follows. from finmc.models.heston import HestonMC from qablet.base.mc import MCPricer model = MCPricer(HestonMC) See a complete example here. See the documentattion of finmc models here - Heston Hull-White LocalVol The dataset should follow the requirements of the corresponding finmc model. Additionally, it should contain the PRICING_TS component for the datetime that we are calculating price as of. dataset = { \"BASE\": \"USD\", \"PRICING_TS\": py_to_ts(pricing_dt).value, ...","title":"finmc models"},{"location":"stats/choices/","text":"Stats: CHOICES TBD.","title":"Choices"},{"location":"stats/choices/#stats-choices","text":"TBD.","title":"Stats: CHOICES"},{"location":"stats/pvvec/","text":"Stats: PV_VEC TBD.","title":"Pvvec"},{"location":"stats/pvvec/#stats-pv_vec","text":"TBD.","title":"Stats: PV_VEC"}]}